// Generated by CoffeeScript 1.6.3
(function() {
  var isSupported, remove;

  isSupported = function() {
    return window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
  };

  remove = function(url, param) {
    var d, del, i, part, parts, reg, _i, _j, _len, _len1;
    parts = url.split('&');
    del = [];
    for (i = _i = 0, _len = parts.length; _i < _len; i = ++_i) {
      part = parts[i];
      reg = new RegExp('\^' + param + '=.*$');
      if (part.match(reg) !== null) {
        del.push(i);
      }
    }
    for (_j = 0, _len1 = del.length; _j < _len1; _j++) {
      d = del[_j];
      parts.splice(d, 1);
    }
    return parts.join('&');
  };

  module.exports = function(parameters, timeout) {
    if (parameters == null) {
      parameters = [];
    }
    if (timeout == null) {
      timeout = 0;
    }
    if (!isSupported()) {
      return false;
    }
    return window.setTimeout(function() {
      var hash, param, parts, query, sub, url, _i, _len;
      parts = window.location.toString().split('?');
      if (typeof parts[1] !== 'undefined') {
        sub = parts[1].split('#');
        url = parts[0];
        query = sub[0];
        hash = typeof sub[1] === 'undefined' ? null : sub[1];
        for (_i = 0, _len = parameters.length; _i < _len; _i++) {
          param = parameters[_i];
          if (query.indexOf("" + param + "=") !== -1) {
            query = remove(query, param);
          }
        }
        if (query !== '') {
          url += '?' + query;
        }
        if (hash !== null) {
          url += '#' + hash;
        }
        return window.history.replaceState({}, null, url);
      }
    }, timeout);
  };

}).call(this);
